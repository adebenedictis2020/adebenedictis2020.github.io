[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "",
    "section": "",
    "text": "x=1\ny=2\nz= x+y\nprint(\"The sum of\", x, \"and\", y, \"is\", z)\n\nThe sum of 1 and 2 is 3"
  },
  {
    "objectID": "dashboards.html",
    "href": "dashboards.html",
    "title": "Dashboard Examples",
    "section": "",
    "text": "Dashboard Examples\nWelcome to my dashboard examples page!\nHere you can find various data visualization projects and interactive dashboards I’ve created."
  },
  {
    "objectID": "physics_data.html",
    "href": "physics_data.html",
    "title": "Physics Teacher Data Analysis",
    "section": "",
    "text": "Let’s begin by exploring the physics teacher dataset and examining all available columns.\n\nimport kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"kanchana1990/linkedins-2023-24-us-math-teacher-jobs\")\n\nprint(\"Path to dataset files:\", path)\n\nPath to dataset files: C:\\Users\\adamd\\.cache\\kagglehub\\datasets\\kanchana1990\\linkedins-2023-24-us-math-teacher-jobs\\versions\\1\n\n\n\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Display all columns without truncation\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)\n\n\n# Install plotly if not already installed\nimport subprocess\nimport sys\n\ntry:\n    import plotly\n    print(\"plotly is already installed!\")\nexcept ImportError:\n    print(\"Installing plotly...\")\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"plotly\"])\n    import plotly\n    print(\"plotly installed successfully!\")\n\nplotly is already installed!\n\n\n\n# Drop unwanted columns\nprint(\"Before dropping columns:\")\nprint(f\"Shape: {df.shape}\")\nprint(f\"Columns: {list(df.columns)}\")\n\n# List of columns to drop\ncolumns_to_drop = ['description', 'jobUrl', 'jobURL', 'url', 'URL', 'link']\n\n# Drop columns that exist\ndropped_columns = []\nfor col in columns_to_drop:\n    if col in df.columns:\n        df = df.drop(col, axis=1)\n        dropped_columns.append(col)\n\nif dropped_columns:\n    print(f\"\\nDropped columns: {dropped_columns}\")\nelse:\n    print(\"\\nNo target columns found to drop\")\n\nprint(f\"\\nAfter dropping columns:\")\nprint(f\"Shape: {df.shape}\")\nprint(f\"Remaining columns: {list(df.columns)}\")\n\nBefore dropping columns:\nShape: (769, 12)\nColumns: ['title', 'location', 'postedTime', 'publishedAt', 'companyName', 'applicationsCount', 'contractType', 'experienceLevel', 'workType', 'sector', 'salary', 'state']\n\nNo target columns found to drop\n\nAfter dropping columns:\nShape: (769, 12)\nRemaining columns: ['title', 'location', 'postedTime', 'publishedAt', 'companyName', 'applicationsCount', 'contractType', 'experienceLevel', 'workType', 'sector', 'salary', 'state']\n\n\n\n# Display the first 5 rows of the dataset in table format\nprint(\"FIRST 5 ROWS OF THE DATASET:\")\nprint(\"=\"*50)\n\n# Display as a nice table\ndf.head()\n\nFIRST 5 ROWS OF THE DATASET:\n==================================================\n\n\n\n\n\n\n\n\n\ntitle\nlocation\npostedTime\npublishedAt\ncompanyName\napplicationsCount\ncontractType\nexperienceLevel\nworkType\nsector\nsalary\nstate\n\n\n\n\n0\nMath Tutors/Teachers (Grades 6-9) *Urgently Hiring*\nThompson, CT\n2 months ago\n2023-11-30\nCatapult Learning\nBe among the first 25 applicants\nPart-time\nEntry level\nEducation and Training\nEducation Administration Programs\nNaN\nCT\n\n\n1\n24/25 SY Teacher - Elementary 8th Grade Math\nGlendale, AZ\n3 days ago\n2024-02-06\nPeoria Unified School District\nBe among the first 25 applicants\nFull-time\nEntry level\nEducation and Training\nPrimary and Secondary Education\nNaN\nAZ\n\n\n2\nMath Tutors/Teachers (Grades 6-9) *Urgently Hiring*\nWinchester, CT\n1 month ago\n2023-12-15\nCatapult Learning\nBe among the first 25 applicants\nPart-time\nEntry level\nEducation and Training\nEducation Administration Programs\nNaN\nCT\n\n\n3\nMath Tutors/Teachers (Grades 6-9) *Urgently Hiring*\nStafford, CT\n2 months ago\n2023-11-30\nCatapult Learning\nBe among the first 25 applicants\nPart-time\nEntry level\nEducation and Training\nEducation Administration Programs\nNaN\nCT\n\n\n4\n5th/6th Grade Math Teacher- iSchool Virtual Academy TCPA (iSVA)\nLewisville, TX\n2 months ago\n2023-11-17\nResponsive Education Solutions\nBe among the first 25 applicants\nFull-time\nEntry level\nEducation and Training\nEducation Administration Programs\nNaN\nTX\n\n\n\n\n\n\n\n\n# Import plotly for interactive visualizations\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Create a map showing job counts by state\nprint(\"Creating interactive map of job counts by state...\")\n\n# First, let's see what location-related columns we have\nlocation_columns = [col for col in df.columns if any(keyword in col.lower() \n                   for keyword in ['state', 'location', 'place', 'city', 'region'])]\nprint(f\"Location-related columns: {location_columns}\")\n\n# Extract state from location column (assuming format: \"City, ST\")\nif 'location' in df.columns:\n    print(\"\\nSample location values:\")\n    print(df['location'].head())\n    \n    # Extract state abbreviation (last 2 characters after comma)\n    df['state'] = df['location'].str.split(',').str[-1].str.strip()\n    \n    # Count jobs by state\n    state_counts = df['state'].value_counts().reset_index()\n    state_counts.columns = ['state', 'job_count']\n    \n    print(f\"\\nFound {len(state_counts)} unique states/regions\")\n    print(\"Top 10 states:\")\n    print(state_counts.head(10))\n    \n    # Create choropleth map\n    fig = px.choropleth(\n        state_counts,\n        locations='state',\n        color='job_count',\n        locationmode='USA-states',\n        scope='usa',\n        color_continuous_scale='Blues',\n        title='Physics/Math Teacher Job Postings by State',\n        labels={'job_count': 'Number of Jobs', 'state': 'State'}\n    )\n    \n    fig.update_layout(\n        title_x=0.5,\n        geo=dict(showframe=False, showcoastlines=True),\n        height=600\n    )\n    \n    fig.show()\n    \nelse:\n    print(\"No 'location' column found. Available columns:\")\n    print(list(df.columns))\n\nCreating interactive map of job counts by state...\nLocation-related columns: ['location', 'state']\n\nSample location values:\n0      Thompson, CT\n1      Glendale, AZ\n2    Winchester, CT\n3      Stafford, CT\n4    Lewisville, TX\nName: location, dtype: object\n\nFound 52 unique states/regions\nTop 10 states:\n           state  job_count\n0             TX         81\n1             CA         66\n2             MA         47\n3             NY         46\n4             IL         40\n5             FL         36\n6             VA         33\n7             NJ         31\n8  United States         30\n9             AZ         30\n\nLocation-related columns: ['location', 'state']\n\nSample location values:\n0      Thompson, CT\n1      Glendale, AZ\n2    Winchester, CT\n3      Stafford, CT\n4    Lewisville, TX\nName: location, dtype: object\n\nFound 52 unique states/regions\nTop 10 states:\n           state  job_count\n0             TX         81\n1             CA         66\n2             MA         47\n3             NY         46\n4             IL         40\n5             FL         36\n6             VA         33\n7             NJ         31\n8  United States         30\n9             AZ         30\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# Create a map showing job counts by city\nprint(\"Creating interactive map of job counts by city...\")\n\nif 'location' in df.columns:\n    # Extract city from location column (assuming format: \"City, ST\")\n    df['city'] = df['location'].str.split(',').str[0].str.strip()\n    \n    # Count jobs by city\n    city_counts = df['city'].value_counts().reset_index()\n    city_counts.columns = ['city', 'job_count']\n    \n    print(f\"\\nFound {len(city_counts)} unique cities\")\n    print(\"Top 15 cities with most job postings:\")\n    print(city_counts.head(15))\n    \n    # For a proper city map, we need coordinates. Let's create a simple bar chart first\n    # and a scatter map for top cities\n    \n    # Create bar chart for top 20 cities\n    top_cities = city_counts.head(20)\n    \n    fig_bar = px.bar(\n        top_cities,\n        x='job_count',\n        y='city',\n        orientation='h',\n        title='Top 20 Cities: Physics/Math Teacher Job Postings',\n        labels={'job_count': 'Number of Jobs', 'city': 'City'},\n        color='job_count',\n        color_continuous_scale='Blues'\n    )\n    \n    fig_bar.update_layout(\n        height=600,\n        yaxis={'categoryorder':'total ascending'}\n    )\n    \n    fig_bar.show()\n    \n    # Create a bubble map for top cities (using approximate coordinates)\n    # Note: For a real implementation, you'd want to geocode the cities\n    top_10_cities = city_counts.head(10)\n    \n    # Sample coordinates for demonstration (you'd normally geocode these)\n    city_coords = {\n        'New York': {'lat': 40.7128, 'lon': -74.0060},\n        'Los Angeles': {'lat': 34.0522, 'lon': -118.2437},\n        'Chicago': {'lat': 41.8781, 'lon': -87.6298},\n        'Houston': {'lat': 29.7604, 'lon': -95.3698},\n        'Phoenix': {'lat': 33.4484, 'lon': -112.0740},\n        'Philadelphia': {'lat': 39.9526, 'lon': -75.1652},\n        'San Antonio': {'lat': 29.4241, 'lon': -98.4936},\n        'San Diego': {'lat': 32.7157, 'lon': -117.1611},\n        'Dallas': {'lat': 32.7767, 'lon': -96.7970},\n        'San Jose': {'lat': 37.3382, 'lon': -121.8863},\n        'Austin': {'lat': 30.2672, 'lon': -97.7431},\n        'Jacksonville': {'lat': 30.3322, 'lon': -81.6557},\n        'San Francisco': {'lat': 37.7749, 'lon': -122.4194},\n        'Columbus': {'lat': 39.9612, 'lon': -82.9988},\n        'Fort Worth': {'lat': 32.7555, 'lon': -97.3308}\n    }\n    \n    # Add coordinates to top cities if available\n    top_10_cities['lat'] = top_10_cities['city'].map(lambda x: city_coords.get(x, {}).get('lat'))\n    top_10_cities['lon'] = top_10_cities['city'].map(lambda x: city_coords.get(x, {}).get('lon'))\n    \n    # Filter out cities without coordinates\n    cities_with_coords = top_10_cities.dropna(subset=['lat', 'lon'])\n    \n    if not cities_with_coords.empty:\n        fig_map = px.scatter_mapbox(\n            cities_with_coords,\n            lat='lat',\n            lon='lon',\n            size='job_count',\n            hover_name='city',\n            hover_data={'job_count': True, 'lat': False, 'lon': False},\n            size_max=50,\n            zoom=3,\n            title='Physics/Math Teacher Jobs by City (Interactive Map)',\n            mapbox_style='open-street-map'\n        )\n        \n        fig_map.update_layout(height=600)\n        fig_map.show()\n    else:\n        print(\"No coordinate data available for bubble map visualization\")\n        \nelse:\n    print(\"No 'location' column found for city analysis\")\n\nCreating interactive map of job counts by city...\n\nFound 395 unique cities\nTop 15 cities with most job postings:\n             city  job_count\n0         Chicago         24\n1        New York         21\n2        Richmond         19\n3    Philadelphia         15\n4         Houston         15\n5        Brooklyn         14\n6   San Francisco         12\n7      Washington         11\n8     Springfield         11\n9   United States          9\n10        Lansing          7\n11     Fort Worth          6\n12         Boston          6\n13      San Diego          6\n14          Salem          6\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nC:\\Users\\adamd\\AppData\\Local\\Temp\\ipykernel_18204\\4144207184.py:64: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\adamd\\AppData\\Local\\Temp\\ipykernel_18204\\4144207184.py:65: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\adamd\\AppData\\Local\\Temp\\ipykernel_18204\\4144207184.py:71: DeprecationWarning:\n\n*scatter_mapbox* is deprecated! Use *scatter_map* instead. Learn more at: https://plotly.com/python/mapbox-to-maplibre/\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Me",
    "section": "",
    "text": "For contact information, please fill out the below:\n\nName \nEmail \nMessage\n\n  I’d like a copy of your résumé \n\n\n\nSend"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Adam DeBenedictis",
    "section": "",
    "text": "Adam DeBenedictis\nHi! My name is Adam and I am currently a student at Boston University studying Applied Business Analytics."
  }
]